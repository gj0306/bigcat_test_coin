// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2/log"
	"bigcat_test_coin/app/blc"
	"bigcat_test_coin/app/blockchain/internal/box"
	"bigcat_test_coin/app/blockchain/internal/chain"
	"bigcat_test_coin/app/blockchain/internal/coinlog"
	"bigcat_test_coin/app/blockchain/internal/config"
	"bigcat_test_coin/app/blockchain/internal/db"
	"bigcat_test_coin/app/blockchain/internal/miner"
	"bigcat_test_coin/app/blockchain/internal/network"
	"bigcat_test_coin/app/blockchain/internal/server"
	"bigcat_test_coin/app/blockchain/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(privateKey *blc.Address, conf *config.YamlConfig, logConf *config.LogConf, dbConf *config.DbConf, addressConf *config.AddressConf, networkConf *config.NetworkConf, serviceConf *config.WebServer, log2 log.Logger) (*chain.Chain, func(), error) {
	logger := coinlog.NewLogger(logConf)
	control, err := db.NewDbControl(dbConf, logger)
	if err != nil {
		return nil, nil, err
	}
	minerControl := miner.NewMinerControl()
	boxBox := box.NewBox(control, logger, minerControl)
	netWork := network.NewNetWork(networkConf, logger)
	greeterService := service.NewGreeterService(log2, boxBox, netWork)
	grpcServer := server.NewGRPCServer(serviceConf, greeterService, log2)
	httpServer := server.NewHTTPServer(serviceConf, greeterService, log2)
	chainChain := newApp(boxBox, conf, netWork, privateKey, logger, greeterService, grpcServer, httpServer)
	return chainChain, func() {
	}, nil
}
