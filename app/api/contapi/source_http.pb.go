// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SourceGreeterHTTPServer interface {
	SayChainSource(context.Context, *SourceChainRequest) (*SourceChainReply, error)
	SayCreateSource(context.Context, *CreateSourceRequest) (*CreateSourceReply, error)
	SaySource(context.Context, *SourceRequest) (*SourceReply, error)
}

func RegisterSourceGreeterHTTPServer(s *http.Server, srv SourceGreeterHTTPServer) {
	r := s.Route("/")
	r.GET("/source/{tx}", _SourceGreeter_SaySource0_HTTP_Handler(srv))
	r.GET("/chain/{tx}", _SourceGreeter_SayChainSource0_HTTP_Handler(srv))
	r.POST("/record", _SourceGreeter_SayCreateSource0_HTTP_Handler(srv))
}

func _SourceGreeter_SaySource0_HTTP_Handler(srv SourceGreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pro.v1.SourceGreeter/SaySource")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaySource(ctx, req.(*SourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SourceReply)
		return ctx.Result(200, reply)
	}
}

func _SourceGreeter_SayChainSource0_HTTP_Handler(srv SourceGreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SourceChainRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pro.v1.SourceGreeter/SayChainSource")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayChainSource(ctx, req.(*SourceChainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SourceChainReply)
		return ctx.Result(200, reply)
	}
}

func _SourceGreeter_SayCreateSource0_HTTP_Handler(srv SourceGreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSourceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/pro.v1.SourceGreeter/SayCreateSource")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SayCreateSource(ctx, req.(*CreateSourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSourceReply)
		return ctx.Result(200, reply)
	}
}

type SourceGreeterHTTPClient interface {
	SayChainSource(ctx context.Context, req *SourceChainRequest, opts ...http.CallOption) (rsp *SourceChainReply, err error)
	SayCreateSource(ctx context.Context, req *CreateSourceRequest, opts ...http.CallOption) (rsp *CreateSourceReply, err error)
	SaySource(ctx context.Context, req *SourceRequest, opts ...http.CallOption) (rsp *SourceReply, err error)
}

type SourceGreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewSourceGreeterHTTPClient(client *http.Client) SourceGreeterHTTPClient {
	return &SourceGreeterHTTPClientImpl{client}
}

func (c *SourceGreeterHTTPClientImpl) SayChainSource(ctx context.Context, in *SourceChainRequest, opts ...http.CallOption) (*SourceChainReply, error) {
	var out SourceChainReply
	pattern := "/chain/{tx}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/pro.v1.SourceGreeter/SayChainSource"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SourceGreeterHTTPClientImpl) SayCreateSource(ctx context.Context, in *CreateSourceRequest, opts ...http.CallOption) (*CreateSourceReply, error) {
	var out CreateSourceReply
	pattern := "/record"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/pro.v1.SourceGreeter/SayCreateSource"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SourceGreeterHTTPClientImpl) SaySource(ctx context.Context, in *SourceRequest, opts ...http.CallOption) (*SourceReply, error) {
	var out SourceReply
	pattern := "/source/{tx}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/pro.v1.SourceGreeter/SaySource"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
