// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SourceGreeterClient is the client API for SourceGreeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SourceGreeterClient interface {
	// Sends a greeting
	SaySource(ctx context.Context, in *SourceRequest, opts ...grpc.CallOption) (*SourceReply, error)
	SayChainSource(ctx context.Context, in *SourceChainRequest, opts ...grpc.CallOption) (*SourceChainReply, error)
	SayCreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*CreateSourceReply, error)
}

type sourceGreeterClient struct {
	cc grpc.ClientConnInterface
}

func NewSourceGreeterClient(cc grpc.ClientConnInterface) SourceGreeterClient {
	return &sourceGreeterClient{cc}
}

func (c *sourceGreeterClient) SaySource(ctx context.Context, in *SourceRequest, opts ...grpc.CallOption) (*SourceReply, error) {
	out := new(SourceReply)
	err := c.cc.Invoke(ctx, "/pro.v1.SourceGreeter/SaySource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceGreeterClient) SayChainSource(ctx context.Context, in *SourceChainRequest, opts ...grpc.CallOption) (*SourceChainReply, error) {
	out := new(SourceChainReply)
	err := c.cc.Invoke(ctx, "/pro.v1.SourceGreeter/SayChainSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sourceGreeterClient) SayCreateSource(ctx context.Context, in *CreateSourceRequest, opts ...grpc.CallOption) (*CreateSourceReply, error) {
	out := new(CreateSourceReply)
	err := c.cc.Invoke(ctx, "/pro.v1.SourceGreeter/SayCreateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SourceGreeterServer is the server API for SourceGreeter service.
// All implementations must embed UnimplementedSourceGreeterServer
// for forward compatibility
type SourceGreeterServer interface {
	// Sends a greeting
	SaySource(context.Context, *SourceRequest) (*SourceReply, error)
	SayChainSource(context.Context, *SourceChainRequest) (*SourceChainReply, error)
	SayCreateSource(context.Context, *CreateSourceRequest) (*CreateSourceReply, error)
	mustEmbedUnimplementedSourceGreeterServer()
}

// UnimplementedSourceGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedSourceGreeterServer struct {
}

func (UnimplementedSourceGreeterServer) SaySource(context.Context, *SourceRequest) (*SourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaySource not implemented")
}
func (UnimplementedSourceGreeterServer) SayChainSource(context.Context, *SourceChainRequest) (*SourceChainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayChainSource not implemented")
}
func (UnimplementedSourceGreeterServer) SayCreateSource(context.Context, *CreateSourceRequest) (*CreateSourceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayCreateSource not implemented")
}
func (UnimplementedSourceGreeterServer) mustEmbedUnimplementedSourceGreeterServer() {}

// UnsafeSourceGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SourceGreeterServer will
// result in compilation errors.
type UnsafeSourceGreeterServer interface {
	mustEmbedUnimplementedSourceGreeterServer()
}

func RegisterSourceGreeterServer(s grpc.ServiceRegistrar, srv SourceGreeterServer) {
	s.RegisterService(&SourceGreeter_ServiceDesc, srv)
}

func _SourceGreeter_SaySource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceGreeterServer).SaySource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.SourceGreeter/SaySource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceGreeterServer).SaySource(ctx, req.(*SourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceGreeter_SayChainSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceGreeterServer).SayChainSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.SourceGreeter/SayChainSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceGreeterServer).SayChainSource(ctx, req.(*SourceChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SourceGreeter_SayCreateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SourceGreeterServer).SayCreateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.SourceGreeter/SayCreateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SourceGreeterServer).SayCreateSource(ctx, req.(*CreateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SourceGreeter_ServiceDesc is the grpc.ServiceDesc for SourceGreeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SourceGreeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pro.v1.SourceGreeter",
	HandlerType: (*SourceGreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaySource",
			Handler:    _SourceGreeter_SaySource_Handler,
		},
		{
			MethodName: "SayChainSource",
			Handler:    _SourceGreeter_SayChainSource_Handler,
		},
		{
			MethodName: "SayCreateSource",
			Handler:    _SourceGreeter_SayCreateSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/api/contapi/source.proto",
}
