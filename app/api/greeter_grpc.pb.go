// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (*BlocksReply, error)
	SayBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockReply, error)
	SayTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionReply, error)
	SayCont(ctx context.Context, in *GetContRequest, opts ...grpc.CallOption) (*GetContReply, error)
	SayAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
	SayMiners(ctx context.Context, in *GetMinersRequest, opts ...grpc.CallOption) (*GetMinersReply, error)
	SayNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesReply, error)
	SayCreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionReply, error)
	SayCreateCont(ctx context.Context, in *CreateContRequest, opts ...grpc.CallOption) (*CreateContReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (*BlocksReply, error) {
	out := new(BlocksReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockReply, error) {
	out := new(BlockReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionReply, error) {
	out := new(GetTransactionReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayCont(ctx context.Context, in *GetContRequest, opts ...grpc.CallOption) (*GetContReply, error) {
	out := new(GetContReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayCont", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayMiners(ctx context.Context, in *GetMinersRequest, opts ...grpc.CallOption) (*GetMinersReply, error) {
	out := new(GetMinersReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayMiners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesReply, error) {
	out := new(GetNodesReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayCreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*CreateTransactionReply, error) {
	out := new(CreateTransactionReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayCreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) SayCreateCont(ctx context.Context, in *CreateContRequest, opts ...grpc.CallOption) (*CreateContReply, error) {
	out := new(CreateContReply)
	err := c.cc.Invoke(ctx, "/pro.v1.Greeter/SayCreateCont", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayBlocks(context.Context, *BlocksRequest) (*BlocksReply, error)
	SayBlock(context.Context, *BlockRequest) (*BlockReply, error)
	SayTransaction(context.Context, *GetTransactionRequest) (*GetTransactionReply, error)
	SayCont(context.Context, *GetContRequest) (*GetContReply, error)
	SayAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	SayMiners(context.Context, *GetMinersRequest) (*GetMinersReply, error)
	SayNodes(context.Context, *GetNodesRequest) (*GetNodesReply, error)
	SayCreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error)
	SayCreateCont(context.Context, *CreateContRequest) (*CreateContReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayBlocks(context.Context, *BlocksRequest) (*BlocksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayBlocks not implemented")
}
func (UnimplementedGreeterServer) SayBlock(context.Context, *BlockRequest) (*BlockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayBlock not implemented")
}
func (UnimplementedGreeterServer) SayTransaction(context.Context, *GetTransactionRequest) (*GetTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayTransaction not implemented")
}
func (UnimplementedGreeterServer) SayCont(context.Context, *GetContRequest) (*GetContReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayCont not implemented")
}
func (UnimplementedGreeterServer) SayAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayAccount not implemented")
}
func (UnimplementedGreeterServer) SayMiners(context.Context, *GetMinersRequest) (*GetMinersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayMiners not implemented")
}
func (UnimplementedGreeterServer) SayNodes(context.Context, *GetNodesRequest) (*GetNodesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayNodes not implemented")
}
func (UnimplementedGreeterServer) SayCreateTransaction(context.Context, *CreateTransactionRequest) (*CreateTransactionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayCreateTransaction not implemented")
}
func (UnimplementedGreeterServer) SayCreateCont(context.Context, *CreateContRequest) (*CreateContReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayCreateCont not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayBlocks(ctx, req.(*BlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayCont_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayCont(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayCont",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayCont(ctx, req.(*GetContRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayMiners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayMiners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayMiners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayMiners(ctx, req.(*GetMinersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayCreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayCreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayCreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayCreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_SayCreateCont_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayCreateCont(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pro.v1.Greeter/SayCreateCont",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayCreateCont(ctx, req.(*CreateContRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pro.v1.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayBlocks",
			Handler:    _Greeter_SayBlocks_Handler,
		},
		{
			MethodName: "SayBlock",
			Handler:    _Greeter_SayBlock_Handler,
		},
		{
			MethodName: "SayTransaction",
			Handler:    _Greeter_SayTransaction_Handler,
		},
		{
			MethodName: "SayCont",
			Handler:    _Greeter_SayCont_Handler,
		},
		{
			MethodName: "SayAccount",
			Handler:    _Greeter_SayAccount_Handler,
		},
		{
			MethodName: "SayMiners",
			Handler:    _Greeter_SayMiners_Handler,
		},
		{
			MethodName: "SayNodes",
			Handler:    _Greeter_SayNodes_Handler,
		},
		{
			MethodName: "SayCreateTransaction",
			Handler:    _Greeter_SayCreateTransaction_Handler,
		},
		{
			MethodName: "SayCreateCont",
			Handler:    _Greeter_SayCreateCont_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/api/greeter.proto",
}
